name: Publish release
on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        GOOS: [linux, windows, darwin]
        GOARCH: [amd64]
      env:
        GOOS: ${{ matrix.GOOS }}
        GOARCH: ${{ matrix.GOARCH }}
    steps:
      - name: Set binary extension
        if: matrix.GOOS == 'windows'
        run: echo "::set-env name=BINARY_EXT::.exe"

      - name: Set compiled binary name
        run: |
          echo "::set-env name=BINARY_NAME::padre-${{ matrix.GOOS }}-${{ matrix.GOARCH }}${BINARY_EXT}"
          echo "Binary name set to $BINARY_NAME"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build project
        run: go build -o $BINARY_NAME

      - name: Attach compiled binary to release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ jobs.release.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ env.ARTIFACT }}
          asset_name: ${{ env.ARTIFACT }}
          asset_content_type: application/octet-stream